package com.javarush.karasAleksandra.api;

import com.javarush.karasAleksandra.service.BrutForceService;
import com.javarush.karasAleksandra.service.CaesarCipherService;

/**
 * Интерфейс для дешифрования отдельных символов различными криптографическими алгоритмами.
 *
 * <p>Определяет контракт для классов, реализующих функциональность дешифрования символов.
 * Используется для поддержки различных алгоритмов шифрования в рамках единого API.
 *
 * @implNote Реализации должны обрабатывать:
 * <ul>
 *   <li>Корректный сдвиг символов согласно ключу</li>
 *   <li>Раздельную обработку букв и не-буквенных символов</li>
 *   <li>Сохранение регистра символов где это применимо</li>
 *   <li>Возврат оригинального символа если он не может быть дешифрован</li>
 *   <li>Модульную арифметику для обработки граничных случаев</li>
 * </ul>
 *
 * @see CaesarCipherService стандартная реализация для шифра Цезаря
 * @see BrutForceService сервис, использующий этот интерфейс для подбора ключей
 */
public interface IDecryptor {

    /**
     * Дешифрует один символ с использованием заданного ключа и словарей.
     *
     * @param key ключ дешифрования - количество позиций для обратного сдвига.
     *           Работает с отрицательным ключом
     * @param encryptedChar зашифрованный символ для дешифрования
     * @param alphabet алфавит для дешифрования буквенных символов. Определяет
     *               порядок символов и диапазон сдвига для букв.
     * @param symbol словарь для дешифрования не-буквенных символов. Определяет
     *              порядок символов и диапазон сдвига для символов.
     *
     * @return дешифрованный символ, либо оригинальный символ {@code encryptedChar}
     *         если он не может быть дешифрован с использованием предоставленных
     *         словарей.
     *
     * @implSpec Реализации должны:
     * <ul>
     *   <li>Поддерживать работу с различными алфавитами и словарями символов</li>
     *   <li>Корректно обрабатывать отрицательные индексы через модульную арифметику</li>
     *   <li>Возвращать валидный символ для любого корректного входного значения</li>
     *   <li>Не выбрасывать исключения для некорректных символов</li>
     * </ul>
     *
     * @example Пример работы:
     * <pre>{@code
     * IDecryptor decryptor = new CaesarCipherService();
     * char result = decryptor.decryptChar(3, 'd', "abcdefghijklmnopqrstuvwxyz", " !");
     * // result = 'a'
     * }</pre>
     */
    char decryptChar(int key, char encryptedChar, String alphabet, String symbol);
}
